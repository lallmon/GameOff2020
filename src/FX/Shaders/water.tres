[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 blue_tint : hint_color;
uniform vec2 sprite_scale;
uniform float wave_strength : hint_range(0,1);

float rand(vec2 coord)
{
    return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
	
	//4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));
	
	vec2 cubic = f * f * (3.0 - 2.0 * f);
	
	return mix(a,b,cubic.x) + (c-a) * cubic.y * (1.0 - cubic.x) + (d-b) * cubic.x * cubic.y;
}

void fragment(){
	
	vec2 noisecoord1 = UV  * sprite_scale * 3.0;
	vec2 noisecoord2 = UV * sprite_scale * 3.0 + 4.0;
	
	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);
	
	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);
	
	vec2 distort_sum = (distort1 + distort2) / (2048.0*(1.0-wave_strength));
	
	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV + distort_sum, 0.0);
	
	color = mix (color, blue_tint, 0.3);
	color.rgb = mix(vec3(0.5),color.rgb, 1.4);
	
	COLOR = color;
}"

[resource]
shader = SubResource( 1 )
shader_param/blue_tint = Color( 0, 0.368627, 1, 1 )
shader_param/sprite_scale = Vector2( 40, 80 )
shader_param/wave_strength = 0.712
