[gd_scene load_steps=26 format=2]

[ext_resource path="res://FX/Masks/pixel_01.png" type="Texture" id=1]
[ext_resource path="res://icon.png" type="Texture" id=2]
[ext_resource path="res://ui/fonts/DepthGuage.tres" type="DynamicFont" id=3]
[ext_resource path="res://FX/Particles/bubble_32x32.png" type="Texture" id=5]
[ext_resource path="res://ui/GameHUD.tscn" type="PackedScene" id=11]
[ext_resource path="res://screens/main/main.gd" type="Script" id=12]

[sub_resource type="CanvasItemMaterial" id=1]
blend_mode = 1

[sub_resource type="ParticlesMaterial" id=2]
emission_shape = 2
emission_box_extents = Vector3( 1000, 200, 1 )
flag_disable_z = true
gravity = Vector3( 0, -20, 0 )
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale = 2.0
scale_random = 1.0

[sub_resource type="ParticlesMaterial" id=3]
emission_shape = 2
emission_box_extents = Vector3( 1000, 200, 1 )
flag_disable_z = true
gravity = Vector3( 0, -20, 0 )
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale = 10.0
scale_random = 1.0

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform vec4 blue_tint : hint_color;
uniform vec2 sprite_scale;
uniform float wave_strength : hint_range(0,1);
uniform float noise_amount : hint_range(0,1);

float rand(vec2 coord)
{
    return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
	
	//4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));
	
	vec2 cubic = f * f * (3.0 - 2.0 * f);
	
	return mix(a,b,cubic.x) + (c-a) * cubic.y * (1.0 - cubic.x) + (d-b) * cubic.x * cubic.y;
}

void fragment(){
	
	vec2 noisecoord1 = UV  * sprite_scale * 3.0;
	vec2 noisecoord2 = UV * sprite_scale * 3.0 + 4.0;
	
	vec2 motion1 = vec2(TIME * 0.3, TIME * -0.4);
	vec2 motion2 = vec2(TIME * 0.1, TIME * 0.5);
	
	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);
	
	vec2 distort_sum = (distort1 + distort2) / (2048.0*(1.0-wave_strength));
	
	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV + distort_sum, distort_sum.x);
	
	color = mix (color, blue_tint, 0.3);
	color.rgb = mix(vec3(0.5),color.rgb, 1.4);
	
	vec2 seed = (vec2(TIME,TIME) * UV);
	float noise = rand(seed);
	
	COLOR = color + vec4(noise*noise_amount, noise*noise_amount, noise*noise_amount,1);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/blue_tint = Color( 0.376471, 0.478431, 0.67451, 1 )
shader_param/sprite_scale = Vector2( 16, 16 )
shader_param/wave_strength = 0.881
shader_param/noise_amount = 0.055

[sub_resource type="StyleBoxFlat" id=6]
corner_radius_top_left = 15
corner_radius_top_right = 15
corner_radius_bottom_right = 15
corner_radius_bottom_left = 15
expand_margin_left = 15.0
expand_margin_right = 15.0

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.784314, 0.784314, 0.784314, 1 )
corner_radius_top_left = 15
corner_radius_top_right = 15
corner_radius_bottom_right = 15
corner_radius_bottom_left = 15
expand_margin_left = 15.0
expand_margin_right = 15.0

[sub_resource type="StyleBoxFlat" id=8]
draw_center = false

[sub_resource type="StyleBoxFlat" id=9]
bg_color = Color( 0.6, 0.6, 0.6, 0.501961 )
draw_center = false
corner_radius_top_left = 15
corner_radius_top_right = 15
corner_radius_bottom_right = 15
corner_radius_bottom_left = 15
expand_margin_left = 15.0
expand_margin_right = 15.0

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;

uniform vec2 offset;
uniform vec2 sprite_scale;
uniform float wave_strength : hint_range(0,1);
uniform float noise_amount : hint_range(0,1);
uniform vec4 blue_tint : hint_color;

float rand(vec2 coord)
{
    return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
	
	//4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));
	
	vec2 cubic = f * f * (3.0 - 2.0 * f);
	
	return mix(a,b,cubic.x) + (c-a) * cubic.y * (1.0 - cubic.x) + (d-b) * cubic.x * cubic.y;
}

void fragment(){
	
	vec2 noisecoord1 = UV  * sprite_scale * 3.0;
	vec2 noisecoord2 = UV * sprite_scale * 3.0 + 4.0;
	
	vec2 motion1 = vec2(TIME * 0.6, TIME * -0.8) + offset;
	vec2 motion2 = vec2(TIME * 0.2, TIME * 1.0) + offset;
	
	vec2 distort1 = vec2(noise(noisecoord1 + motion1), noise(noisecoord2 + motion1)) - vec2(0.5);
	vec2 distort2 = vec2(noise(noisecoord1 + motion2), noise(noisecoord2 + motion2)) - vec2(0.5);
	
	vec2 distort_sum = (distort1 + distort2) / (2048.0*(1.0-wave_strength));
	
	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV + distort_sum, 0);
	
//	color = mix (color, blue_tint, 0.3);
//	color.rgb = mix(vec3(0.5),color.rgb, 1.4);
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/offset = null
shader_param/sprite_scale = Vector2( 10, 10 )
shader_param/wave_strength = 0.95
shader_param/noise_amount = null
shader_param/blue_tint = null

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float cutoff : hint_range(0.0, 1.0);
uniform float smooth_size : hint_range(0.0, 1.0);
uniform sampler2D mask : hint_albedo;

uniform vec4 color : hint_color;

void fragment()
{
	float value = texture(mask, UV).r;
	float alpha = smoothstep(cutoff, cutoff + smooth_size, value * (1.0 - smooth_size) + smooth_size);
	COLOR = vec4(color.rgb, alpha);
}
"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/cutoff = 0.0
shader_param/smooth_size = 0.302
shader_param/color = Color( 0, 0, 0, 1 )
shader_param/mask = ExtResource( 1 )

[sub_resource type="Animation" id=14]
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/cutoff")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=15]
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/cutoff")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="Animation" id=16]
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/cutoff")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0 ]
}

[sub_resource type="Animation" id=17]
tracks/0/type = "value"
tracks/0/path = NodePath("Ripple:material:shader_param/wave_strength")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("DistortTransition:material:shader_param/cutoff")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=18]
tracks/0/type = "value"
tracks/0/path = NodePath("Ripple:material:shader_param/wave_strength")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.95, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("DistortTransition:material:shader_param/cutoff")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="Animation" id=19]
tracks/0/type = "value"
tracks/0/path = NodePath("DistortTransition:material:shader_param/cutoff")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.5, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Ripple:material:shader_param/wave_strength")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 0.95 ]
}

[node name="main" type="Node2D"]
pause_mode = 2
script = ExtResource( 12 )

[node name="levels" type="Node2D" parent="."]
pause_mode = 1

[node name="hud_layer" type="CanvasLayer" parent="."]

[node name="GameHUD" parent="hud_layer" instance=ExtResource( 11 )]
mouse_filter = 2

[node name="pause_layer" type="CanvasLayer" parent="."]
pause_mode = 2

[node name="pause" type="Control" parent="pause_layer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="pause_bg" type="ColorRect" parent="pause_layer/pause"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 0.784314 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Bubbles" type="Particles2D" parent="pause_layer/pause/pause_bg"]
visible = false
material = SubResource( 1 )
position = Vector2( 998.02, 1560.73 )
amount = 50
lifetime = 100.0
visibility_rect = Rect2( -1000, -2000, 1920, 9000 )
local_coords = false
draw_order = 1
process_material = SubResource( 2 )
texture = ExtResource( 5 )

[node name="Bubbles2" type="Particles2D" parent="pause_layer/pause/pause_bg"]
visible = false
material = SubResource( 1 )
position = Vector2( 1082.85, 1544.7 )
amount = 15
lifetime = 100.0
visibility_rect = Rect2( -1000, -2000, 1920, 9000 )
local_coords = false
draw_order = 1
process_material = SubResource( 3 )
texture = ExtResource( 5 )

[node name="pause_ripple" type="Sprite" parent="pause_layer/pause/pause_bg"]
visible = false
material = SubResource( 5 )
position = Vector2( 960, 542.67 )
scale = Vector2( 30, 17 )
texture = ExtResource( 2 )

[node name="VSplitContainer" type="VSplitContainer" parent="pause_layer/pause"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -124.5
margin_top = -86.0
margin_right = 124.5
margin_bottom = 86.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="pause_layer/pause/VSplitContainer"]
margin_right = 249.0
margin_bottom = 77.0
custom_fonts/font = ExtResource( 3 )
text = "PAUSED"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RestartButton" type="Button" parent="pause_layer/pause/VSplitContainer"]
margin_top = 89.0
margin_right = 249.0
margin_bottom = 172.0
focus_mode = 0
custom_styles/hover = SubResource( 6 )
custom_styles/pressed = SubResource( 7 )
custom_styles/focus = SubResource( 8 )
custom_styles/normal = SubResource( 9 )
custom_fonts/font = ExtResource( 3 )
action_mode = 0
enabled_focus_mode = 0
text = "RESTART"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="transition_layer" type="CanvasLayer" parent="."]

[node name="Ripple" type="TextureRect" parent="transition_layer"]
material = SubResource( 11 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
texture = ExtResource( 2 )
expand = true
stretch_mode = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DistortTransition" type="ColorRect" parent="transition_layer"]
material = SubResource( 13 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="transition" type="ColorRect" parent="transition_layer"]
visible = false
material = SubResource( 13 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="transition_layer/transition"]
anims/_SETUP = SubResource( 14 )
anims/transition_in = SubResource( 15 )
anims/transition_out = SubResource( 16 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="transition_layer"]
autoplay = "_SETUP"
anims/_SETUP = SubResource( 17 )
anims/transition_in = SubResource( 18 )
anims/transition_out = SubResource( 19 )

[node name="screen_timer" type="Timer" parent="."]
one_shot = true
[connection signal="pressed" from="pause_layer/pause/VSplitContainer/RestartButton" to="." method="_on_RestartButton_pressed"]
[connection signal="timeout" from="screen_timer" to="." method="_on_screen_timer_timeout"]
